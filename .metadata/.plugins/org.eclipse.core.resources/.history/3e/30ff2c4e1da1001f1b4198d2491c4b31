package com.biblioteca.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.biblioteca.conexion.ConexionBD;

public class PrestamoDAO {

    // Validate if a user has outstanding penalties or is inactive
    public boolean validarUsuario(String username) {
        String sql = "SELECT mora_acumulada, estado FROM usuarios WHERE username = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    double mora = rs.getDouble("mora_acumulada");
                    String estado = rs.getString("estado");
                    return mora <= 0 && "ACTIVO".equalsIgnoreCase(estado);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Validate if there are enough copies available for a loan
    public boolean validarDisponibilidadMaterial(int ejemplarId) {
        String sql = "SELECT unidades_disponibles FROM materiales WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, ejemplarId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int disponibles = rs.getInt("unidades_disponibles");
                    return disponibles > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Register a new loan
    public void registrarPrestamo(String username, int ejemplarId) {
        String sql = "INSERT INTO prestamos (id_usuario, id_material, fecha_prestamo, devuelto) " +
                     "VALUES ((SELECT id FROM usuarios WHERE username = ?), ?, NOW(), false)";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setInt(2, ejemplarId);
            ps.executeUpdate();
            actualizarUnidades(ejemplarId, -1); // Deduct one copy
            System.out.println("Préstamo registrado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Register a material return
    public void registrarDevolucion(int prestamoId) {
        String sql = "UPDATE prestamos SET devuelto = true, fecha_devolucion = NOW() WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, prestamoId);
            ps.executeUpdate();

            // Restore the copy count
            String sqlMaterial = "SELECT id_material FROM prestamos WHERE id = ?";
            try (PreparedStatement psMaterial = con.prepareStatement(sqlMaterial)) {
                psMaterial.setInt(1, prestamoId);
                try (ResultSet rs = psMaterial.executeQuery()) {
                    if (rs.next()) {
                        int ejemplarId = rs.getInt("id_material");
                        actualizarUnidades(ejemplarId, 1);
                    }
                }
            }
            System.out.println("Devolución registrada correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Calculate overdue penalties
    public double calcularMora(int prestamoId, double tasaDiaria) {
        String sql = "SELECT DATEDIFF(NOW(), fecha_prestamo) AS dias FROM prestamos WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, prestamoId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int dias = rs.getInt("dias");
                    return dias > 0 ? dias * tasaDiaria : 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    // Register overdue penalties
    public void registrarMora(int prestamoId, double mora) {
        String sql = "INSERT INTO multas (id_prestamo, monto, pagada, fecha_generacion) VALUES (?, ?, false, NOW())";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, prestamoId);
            ps.setDouble(2, mora);
            ps.executeUpdate();

            // Update user's accumulated mora
            String sqlUsuario = "UPDATE usuarios SET mora_acumulada = mora_acumulada + ? " +
                                "WHERE id = (SELECT id_usuario FROM prestamos WHERE id = ?)";
            try (PreparedStatement psUsuario = con.prepareStatement(sqlUsuario)) {
                psUsuario.setDouble(1, mora);
                psUsuario.setInt(2, prestamoId);
                psUsuario.executeUpdate();
            }
            System.out.println("Mora registrada correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Update the number of available copies for a material
    public void actualizarUnidades(int ejemplarId, int cambio) {
        String sql = "UPDATE materiales SET unidades_disponibles = unidades_disponibles + ? WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, cambio);
            ps.setInt(2, ejemplarId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public boolean validarLimitePrestamos(String username, String tipoMaterial) {
        String sqlLimite = "SELECT max_prestamos FROM configuracion_prestamos WHERE tipo_material = ?";
        String sqlConteo = "SELECT COUNT(*) AS prestamos_activos " +
                           "FROM prestamos p " +
                           "JOIN materiales m ON p.id_material = m.id " +
                           "WHERE p.devuelto = false AND m.tipo = ? AND p.id_usuario = " +
                           "(SELECT id FROM usuarios WHERE username = ?)";

        try (Connection con = ConexionBD.conectar();
             PreparedStatement psLimite = con.prepareStatement(sqlLimite);
             PreparedStatement psConteo = con.prepareStatement(sqlConteo)) {

            // Fetch loan limit for material type
            psLimite.setString(1, tipoMaterial);
            ResultSet rsLimite = psLimite.executeQuery();
            int maxPrestamos = 0;
            if (rsLimite.next()) {
                maxPrestamos = rsLimite.getInt("max_prestamos");
            }

            // Count active loans for the user and material type
            psConteo.setString(1, tipoMaterial);
            psConteo.setString(2, username);
            ResultSet rsConteo = psConteo.executeQuery();
            int prestamosActivos = 0;
            if (rsConteo.next()) {
                prestamosActivos = rsConteo.getInt("prestamos_activos");
            }

            // Validate limit
            return prestamosActivos < maxPrestamos;

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

}
