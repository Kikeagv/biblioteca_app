package com.biblioteca.service;

import com.biblioteca.dao.PrestamoDAO;
import com.biblioteca.dao.UsuarioDAO;
import com.biblioteca.dao.EjemplarDAO;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class PrestamoService {
    private PrestamoDAO prestamoDAO = new PrestamoDAO();
    private UsuarioDAO usuarioDAO = new UsuarioDAO();
    private EjemplarDAO ejemplarDAO = new EjemplarDAO();

    // Check if a user can borrow a material
    public boolean puedePrestar(int userId, int materialId) {
        try {
            // Validate material availability
            if (!prestamoDAO.validarDisponibilidadMaterial(materialId)) {
                System.out.println("El material no está disponible.");
                return false;
            }

            // Validate user loan status
            if (!usuarioDAO.validarUsuario(userId)) {
                System.out.println("El usuario tiene préstamos vencidos.");
                return false;
            }

            // Validate loan limit for the material type
            String tipoMaterial = ejemplarDAO.obtenerTipoMaterial(materialId);
            if (!prestamoDAO.validarLimitePrestamos(userId, tipoMaterial)) {
                System.out.println("El usuario alcanzó el límite de préstamos para el tipo: " + tipoMaterial);
                return false;
            }

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Register a new loan
    public void registrarPrestamo(int userId, int materialId) {
        try {
            if (puedePrestar(userId, materialId)) {
                prestamoDAO.registrarPrestamo(userId, materialId);
                System.out.println("Préstamo registrado correctamente.");
            } else {
                System.out.println("No se pudo registrar el préstamo debido a restricciones.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al registrar el préstamo: " + e.getMessage());
        }
    }

    // Register the return of a material
    public void registrarDevolucion(int prestamoId, double tasaDiaria) {
        try {
            double mora = prestamoDAO.calcularMora(prestamoId, tasaDiaria);
            prestamoDAO.registrarDevolucion(prestamoId);

            if (mora > 0) {
                prestamoDAO.registrarMora(prestamoId, mora);
                System.out.println("Mora registrada: $" + mora);
            } else {
                System.out.println("Devolución registrada sin mora.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al registrar la devolución: " + e.getMessage());
        }
    }

    // Get active loans for a specific user
    public List<Map<String, String>> obtenerPrestamosActivos(int userId) {
        return prestamoDAO.obtenerPrestamosActivos(userId);
    }

    // Get all loans
    public List<Map<String, String>> obtenerTodosPrestamos() {
        return prestamoDAO.obtenerTodosPrestamos();
    }

    // Get pending loans for a user
    public List<Map<String, String>> obtenerPrestamosPendientes(int userId) {
        return prestamoDAO.obtenerPrestamosPendientes(userId);
    }

    // Get pending loans with overdue fees for a user
    public List<Map<String, String>> obtenerPrestamosPendientesConMora(int userId) {
        return prestamoDAO.obtenerPrestamosPendientesConMora(userId);
    }

    // Add overdue fee for a loan
    public void agregarMora(int prestamoId, double montoDiario) {
        try {
            prestamoDAO.agregarMora(prestamoId, montoDiario);
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al agregar mora: " + e.getMessage());
        }
    }
}
