package com.biblioteca.service;

import com.biblioteca.dao.PrestamoDAO;

public class PrestamoService {

    private PrestamoDAO prestamoDAO = new PrestamoDAO();

    // Check if a user can borrow based on their status and material availability
    public boolean puedePrestar(String username, int ejemplarId, String tipoMaterial) {
        if (!prestamoDAO.validarUsuario(username)) {
            System.out.println("El usuario tiene mora pendiente o no está activo.");
            return false;
        }

        if (!prestamoDAO.validarDisponibilidadMaterial(ejemplarId)) {
            System.out.println("El material no está disponible para préstamo.");
            return false;
        }

        if (!prestamoDAO.validarLimitePrestamos(username, tipoMaterial)) {
            System.out.println("El usuario ha alcanzado el límite de préstamos para el tipo: " + tipoMaterial);
            return false;
        }

        return true;
    }


    // Register a new loan after validations
    public void registrarPrestamo(String username, int ejemplarId) {
        if (!puedePrestar(username, ejemplarId)) {
            System.out.println("No se puede registrar el préstamo.");
            return;
        }
        prestamoDAO.registrarPrestamo(username, ejemplarId);
        System.out.println("Préstamo registrado correctamente.");
    }

    // Register the return of a borrowed material
    public void registrarDevolucion(int prestamoId, double tasaDiaria) {
        double mora = prestamoDAO.calcularMora(prestamoId, tasaDiaria);
        prestamoDAO.registrarDevolucion(prestamoId);

        if (mora > 0) {
            prestamoDAO.registrarMora(prestamoId, mora);
            System.out.println("Mora registrada: $" + mora);
        } else {
            System.out.println("Devolución registrada sin mora.");
        }
    }

    // Calculate overdue penalties
    public double calcularMora(int prestamoId, double tasaDiaria) {
        return prestamoDAO.calcularMora(prestamoId, tasaDiaria);
    }
}
