package com.biblioteca.ui;

import com.biblioteca.dao.EjemplarDAO;
import com.toedter.calendar.JDateChooser;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AgregarMaterialUI {
    private EjemplarDAO ejemplarDAO = new EjemplarDAO();
    private Map<String, JTextField> camposEspecificos = new HashMap<>();
    private JDateChooser dateChooser;

    private static final Map<String, List<String>> MATERIAL_FIELDS = Map.of(
        "Tesis", List.of("Autor", "Título de Investigación", "Carrera", "Universidad", "Año de Presentación"),
        "Revista", List.of("Editorial", "Periodicidad", "Fecha de Publicación"),
        "Libro", List.of("Autor", "Género", "Número de Páginas", "Editorial", "ISBN", "Año de Publicación"),
        "DVD", List.of("Director", "Género", "Duración"),
        "CD", List.of("Artista", "Género", "Duración", "Número de Canciones")
    );

    public void mostrarVentana() {
        JFrame frame = new JFrame("Agregar Nuevo Material");
        frame.setSize(600, 700);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(null);

        JLabel lblTipo = new JLabel("Tipo de Material:");
        lblTipo.setBounds(20, 20, 150, 25);
        frame.add(lblTipo);

        String[] tiposMaterial = {"Libro", "Revista", "Tesis", "CD", "DVD"};
        JComboBox<String> comboTipo = new JComboBox<>(tiposMaterial);
        comboTipo.setBounds(180, 20, 200, 25);
        frame.add(comboTipo);

        JLabel lblTitulo = new JLabel("Título:");
        lblTitulo.setBounds(20, 60, 150, 25);
        frame.add(lblTitulo);

        JTextField txtTitulo = new JTextField();
        txtTitulo.setBounds(180, 60, 200, 25);
        frame.add(txtTitulo);

        JLabel lblCodigoInterno = new JLabel("Código Interno:");
        lblCodigoInterno.setBounds(20, 100, 150, 25);
        frame.add(lblCodigoInterno);

        JTextField txtCodigoInterno = new JTextField();
        txtCodigoInterno.setBounds(180, 100, 200, 25);
        frame.add(txtCodigoInterno);

        JLabel lblCantidad = new JLabel("Cantidad:");
        lblCantidad.setBounds(20, 140, 150, 25);
        frame.add(lblCantidad);

        JTextField txtCantidad = new JTextField();
        txtCantidad.setBounds(180, 140, 200, 25);
        frame.add(txtCantidad);

        JLabel lblUbicacion = new JLabel("Ubicación:");
        lblUbicacion.setBounds(20, 180, 150, 25);
        frame.add(lblUbicacion);

        JTextField txtUbicacion = new JTextField();
        txtUbicacion.setBounds(180, 180, 200, 25);
        frame.add(txtUbicacion);

        JLabel lblDetalles = new JLabel("Detalles Específicos:");
        lblDetalles.setBounds(20, 220, 200, 25);
        frame.add(lblDetalles);

        JPanel panelDetalles = new JPanel(new GridBagLayout());
        JScrollPane scrollDetalles = new JScrollPane(panelDetalles);
        scrollDetalles.setBounds(20, 250, 550, 250);
        frame.add(scrollDetalles);

        GridBagConstraints gbcDetalles = new GridBagConstraints();
        gbcDetalles.insets = new Insets(5, 5, 5, 5);
        gbcDetalles.fill = GridBagConstraints.HORIZONTAL;
        gbcDetalles.weightx = 1;

        actualizarCampos(panelDetalles, gbcDetalles, "Libro");

        comboTipo.addActionListener(e -> {
            panelDetalles.removeAll();
            String tipoSeleccionado = (String) comboTipo.getSelectedItem();
            actualizarCampos(panelDetalles, gbcDetalles, tipoSeleccionado);
            panelDetalles.revalidate();
            panelDetalles.repaint();
        });

        JButton btnGuardar = new JButton("Guardar");
        btnGuardar.setBounds(150, 550, 120, 30);
        estilizarBoton(btnGuardar, Color.GREEN, Color.WHITE);
        frame.add(btnGuardar);

        JButton btnCancelar = new JButton("Cancelar");
        btnCancelar.setBounds(300, 550, 120, 30);
        estilizarBoton(btnCancelar, Color.RED, Color.WHITE);
        frame.add(btnCancelar);

        btnGuardar.addActionListener(e -> {
            try {
                String tipoMaterial = (String) comboTipo.getSelectedItem();
                String titulo = txtTitulo.getText();
                String codigoInterno = txtCodigoInterno.getText();
                int cantidad = Integer.parseInt(txtCantidad.getText());
                String ubicacion = txtUbicacion.getText();

                if (titulo.isEmpty() || codigoInterno.isEmpty() || ubicacion.isEmpty()) {
                    throw new IllegalArgumentException("Todos los campos principales son obligatorios.");
                }

                Map<String, String> detallesEspecificos = new HashMap<>();
                for (String campo : MATERIAL_FIELDS.get(tipoMaterial)) {
                    String value = campo.equals("Fecha de Publicación") ? 
                            (dateChooser.getDate() != null ? new java.sql.Date(dateChooser.getDate().getTime()).toString() : null) :
                            camposEspecificos.get(campo).getText();
                    
                    if (value == null || value.isEmpty()) {
                        throw new IllegalArgumentException("El campo " + campo + " es obligatorio.");
                    }
                    detallesEspecificos.put(campo, value);
                }

                ejemplarDAO.registrarEjemplarConDetalles(tipoMaterial, titulo, cantidad, ubicacion, detallesEspecificos);

                JOptionPane.showMessageDialog(frame, "Material registrado correctamente.");
                frame.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        btnCancelar.addActionListener(e -> frame.dispose());

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void actualizarCampos(JPanel panelDetalles, GridBagConstraints gbcDetalles, String tipoMaterial) {
        camposEspecificos.clear();
        List<String> campos = MATERIAL_FIELDS.get(tipoMaterial);
        for (String campo : campos) {
            if (campo.equals("Fecha de Publicación")) {
                JLabel lblFecha = new JLabel(campo + ":");
                dateChooser = new JDateChooser();
                dateChooser.setDateFormatString("yyyy-MM-dd");
                gbcDetalles.gridx = 0;
                gbcDetalles.gridy++;
                panelDetalles.add(lblFecha, gbcDetalles);
                gbcDetalles.gridx = 1;
                panelDetalles.add(dateChooser, gbcDetalles);
            } else {
                agregarCampoEspecifico(panelDetalles, gbcDetalles, campo);
            }
        }
    }

    private void agregarCampoEspecifico(JPanel panel, GridBagConstraints gbc, String nombreCampo) {
        JLabel label = new JLabel(nombreCampo + ":");
        JTextField textField = new JTextField(15);
        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(label, gbc);
        gbc.gridx = 1;
        panel.add(textField, gbc);
        camposEspecificos.put(nombreCampo, textField);
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.BOLD, 14));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}
