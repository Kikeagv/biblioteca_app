This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-12T21:48:09.163Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
conexion/
  ConexionBD.java
dao/
  EjemplarDAO.java
  PrestamoDAO.java
  UsuarioDAO.java
main/
  MainApp.java
service/
  PrestamoService.java
  UsuarioService.java
ui/
  AgregarMaterialUI.java
  AgregarUsuarioUI.java
  BuscarMaterialesUI.java
  GestionMaterialesUI.java
  GestionUsuariosUI.java
  HacerPrestamoUI.java
  ListarUsuariosUI.java
  LoginUI.java
  MainUI.java
  OpcionesUsuarioUI.java
  PrestamosUI.java
  RegresarMaterialUI.java
  VerPrestamosUI.java

================================================================
Repository Files
================================================================

================
File: conexion/ConexionBD.java
================
package com.biblioteca.conexion;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConexionBD {
    private static final String URL = "jdbc:mysql://localhost:3306/biblioteca"; // Cambia 'biblioteca' por el nombre de tu base de datos
    private static final String USER = "root"; // Usuario de tu base de datos
    private static final String PASSWORD = "123456"; // Contraseña de tu base de datos

    // Método para establecer la conexión
    public static Connection conectar() throws SQLException {
        Connection conexion = null;
        try {
            conexion = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Conexión exitosa a la base de datos.");
        } catch (SQLException e) {
            System.err.println("Error al conectar a la base de datos: " + e.getMessage());
            throw e;
        }
        return conexion;
    }
}

================
File: dao/EjemplarDAO.java
================
package com.biblioteca.dao;

import com.biblioteca.conexion.ConexionBD;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class EjemplarDAO {

	// Generar el código interno automáticamente según el tipo de material
	private String generarCodigoInterno(String tipo) throws SQLException {
	    String prefijo;
	    switch (tipo) {
	        case "Libro": prefijo = "LIB"; break;
	        case "Revista": prefijo = "REV"; break;
	        case "CD": prefijo = "CD"; break;
	        case "DVD": prefijo = "DVD"; break;
	        case "Tesis": prefijo = "TES"; break;
	        default: throw new IllegalArgumentException("Tipo desconocido: " + tipo);
	    }

	    String sql = "SELECT codigo_interno FROM materiales WHERE tipo = ? ORDER BY id DESC LIMIT 1";
	    try (Connection con = ConexionBD.conectar();
	         PreparedStatement ps = con.prepareStatement(sql)) {
	        ps.setString(1, tipo);
	        try (ResultSet rs = ps.executeQuery()) {
	            if (rs.next()) {
	                String ultimoCodigo = rs.getString("codigo_interno");
	                int numero = Integer.parseInt(ultimoCodigo.substring(3)) + 1;
	                return String.format("%s%05d", prefijo, numero);
	            }
	        }
	    }
	    return String.format("%s%05d", prefijo, 1);
	}
	
    // Method to register a new material and its specific details
	public void registrarEjemplarConDetalles(String tipo, String titulo, int cantidad, String ubicacion, Map<String, String> detallesEspecificos)
 {
	    String sqlMateriales = "INSERT INTO materiales (tipo, titulo, codigo_interno, unidades_disponibles, ubicacion, fecha_registro) VALUES (?, ?, ?, ?, ?, NOW())";
	    Connection con = null;

	    try {
	        con = ConexionBD.conectar();
	        con.setAutoCommit(false);

	        // Generar el código interno automáticamente
	        String codigoInterno = generarCodigoInterno(tipo);

	        int idMaterial;
	        try (PreparedStatement psMateriales = con.prepareStatement(sqlMateriales, PreparedStatement.RETURN_GENERATED_KEYS)) {
	            psMateriales.setString(1, tipo);
	            psMateriales.setString(2, titulo);
	            psMateriales.setString(3, codigoInterno);
	            psMateriales.setInt(4, cantidad);
	            psMateriales.setString(5, ubicacion);
	            psMateriales.executeUpdate();

	            ResultSet rs = psMateriales.getGeneratedKeys();
	            if (rs.next()) {
	                idMaterial = rs.getInt(1);
	            } else {
	                throw new SQLException("Error al obtener el ID generado para el material.");
	            }
	        }

	        registrarDetallesEspecificos(con, idMaterial, tipo, detallesEspecificos);

	        con.commit();
	    } catch (SQLException e) {
	        if (con != null) {
	            try {
	                con.rollback();
	            } catch (SQLException rollbackEx) {
	                rollbackEx.printStackTrace();
	            }
	        }
	        e.printStackTrace();
	        throw new RuntimeException("Error al registrar el material: " + e.getMessage());
	    } finally {
	        if (con != null) {
	            try {
	                con.setAutoCommit(true);
	                con.close();
	            } catch (SQLException closeEx) {
	                closeEx.printStackTrace();
	            }
	        }
	    }
	}


    // Method to handle inserting specific details based on material type
    private void registrarDetallesEspecificos(Connection con, int idMaterial, String tipo, Map<String, String> detallesEspecificos) throws SQLException {
        String sql;

        switch (tipo) {
            case "Libro":
                sql = "INSERT INTO libros (id, autor, editorial, isbn, numero_paginas, genero, anio_publicacion) VALUES (?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1, idMaterial);
                    ps.setString(2, detallesEspecificos.get("Autor"));
                    ps.setString(3, detallesEspecificos.get("Editorial"));
                    ps.setString(4, detallesEspecificos.get("ISBN"));
                    ps.setInt(5, Integer.parseInt(detallesEspecificos.get("Número de Páginas")));
                    ps.setString(6, detallesEspecificos.get("Género"));
                    ps.setInt(7, Integer.parseInt(detallesEspecificos.get("Año de Publicación")));
                    ps.executeUpdate();
                }
                break;

            case "Revista":
                sql = "INSERT INTO revistas (id, editorial, periodicidad, fecha_publicacion) VALUES (?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1, idMaterial);
                    ps.setString(2, detallesEspecificos.get("Editorial"));
                    ps.setString(3, detallesEspecificos.get("Periodicidad"));

                    // Convert and set Fecha de Publicación
                    String fecha = detallesEspecificos.get("Fecha de Publicación");
                    ps.setDate(4, java.sql.Date.valueOf(fecha)); // Use java.sql.Date for compatibility

                    ps.executeUpdate();
                }
                break;


            case "Tesis":
                sql = "INSERT INTO tesis (id, autor, titulo_investigacion, carrera, universidad, anio_presentacion) VALUES (?, ?, ?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1, idMaterial);
                    ps.setString(2, detallesEspecificos.get("Autor"));
                    ps.setString(3, detallesEspecificos.get("Título de Investigación"));
                    ps.setString(4, detallesEspecificos.get("Carrera"));
                    ps.setString(5, detallesEspecificos.get("Universidad"));
                    ps.setInt(6, Integer.parseInt(detallesEspecificos.get("Año de Presentación")));
                    ps.executeUpdate();
                }
                break;

            case "CD":
                sql = "INSERT INTO cds (id, artista, genero, duracion, numero_canciones) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1, idMaterial);
                    ps.setString(2, detallesEspecificos.get("Artista"));
                    ps.setString(3, detallesEspecificos.get("Género"));
                    ps.setTime(4, java.sql.Time.valueOf(detallesEspecificos.get("Duración")));
                    ps.setInt(5, Integer.parseInt(detallesEspecificos.get("Número de Canciones")));
                    ps.executeUpdate();
                }
                break;

            case "DVD":
                sql = "INSERT INTO dvds (id, director, genero, duracion) VALUES (?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1, idMaterial);
                    ps.setString(2, detallesEspecificos.get("Director"));
                    ps.setString(3, detallesEspecificos.get("Género"));
                    ps.setTime(4, java.sql.Time.valueOf(detallesEspecificos.get("Duración")));
                    ps.executeUpdate();
                }
                break;

            default:
                throw new SQLException("Tipo de material desconocido: " + tipo);
        }
    }

    // Method to retrieve the list of all materials
    public List<String[]> consultarEjemplares() {
        String sql = "SELECT id, tipo, titulo, unidades_disponibles, ubicacion FROM materiales";
        List<String[]> ejemplares = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                ejemplares.add(new String[]{
                        String.valueOf(rs.getInt("id")),
                        rs.getString("tipo"),
                        rs.getString("titulo"),
                        String.valueOf(rs.getInt("unidades_disponibles")),
                        rs.getString("ubicacion")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ejemplares;
    }
    
    public List<String[]> buscarMateriales(String criterio) {
        String sql = "SELECT id, tipo, titulo, unidades_disponibles, ubicacion FROM materiales " +
                     "WHERE titulo LIKE ? OR tipo LIKE ?";
        List<String[]> materiales = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, "%" + criterio + "%");
            ps.setString(2, "%" + criterio + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    materiales.add(new String[]{
                        String.valueOf(rs.getInt("id")),
                        rs.getString("tipo"),
                        rs.getString("titulo"),
                        String.valueOf(rs.getInt("unidades_disponibles")),
                        rs.getString("ubicacion")
                    });
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return materiales;
    }
    
    public List<String[]> buscarMaterialesDisponibles(String criterio) {
        String sql = "SELECT id, tipo, titulo, unidades_disponibles, ubicacion " +
                     "FROM materiales WHERE unidades_disponibles > 1 " +
                     "AND (titulo LIKE ? OR tipo LIKE ?)";
        List<String[]> materiales = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, "%" + criterio + "%");
            ps.setString(2, "%" + criterio + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    materiales.add(new String[]{
                        String.valueOf(rs.getInt("id")),
                        rs.getString("tipo"),
                        rs.getString("titulo"),
                        String.valueOf(rs.getInt("unidades_disponibles")),
                        rs.getString("ubicacion")
                    });
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return materiales;
    }


}

================
File: dao/PrestamoDAO.java
================
package com.biblioteca.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.biblioteca.conexion.ConexionBD;

public class PrestamoDAO {
	
	public List<Map<String, String>> obtenerPrestamosActivos(String username) {
	    String sql = "SELECT p.id, m.titulo AS material, p.fecha_prestamo, p.estado " +
	                 "FROM prestamos p " +
	                 "JOIN materiales m ON p.id_material = m.id " +
	                 "WHERE p.id_usuario = (SELECT id FROM usuarios WHERE username = ?) " +
	                 "AND p.estado = 'Pendiente'";

	    List<Map<String, String>> prestamos = new ArrayList<>();
	    try (Connection con = ConexionBD.conectar();
	         PreparedStatement ps = con.prepareStatement(sql)) {
	        ps.setString(1, username);
	        try (ResultSet rs = ps.executeQuery()) {
	            while (rs.next()) {
	                Map<String, String> prestamo = new HashMap<>();
	                prestamo.put("id", String.valueOf(rs.getInt("id")));
	                prestamo.put("material", rs.getString("material"));
	                prestamo.put("fecha_prestamo", rs.getString("fecha_prestamo"));
	                prestamo.put("estado", rs.getString("estado"));
	                prestamos.add(prestamo);
	            }
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return prestamos;
	}


	public boolean tienePrestamosDefaulter(String username) {
		String sql = "SELECT COUNT(*) AS prestamos_vencidos " +
	             "FROM prestamos p " +
	             "WHERE p.id_usuario = (SELECT id FROM usuarios WHERE username = ?) " +
	             "AND p.estado = 'Pendiente' " +
	             "AND DATE_ADD(p.fecha_prestamo, INTERVAL 15 DAY) < NOW()";


	    try (Connection con = ConexionBD.conectar();
	         PreparedStatement ps = con.prepareStatement(sql)) {
	        ps.setString(1, username);
	        try (ResultSet rs = ps.executeQuery()) {
	            if (rs.next()) {
	                int prestamosVencidos = rs.getInt("prestamos_vencidos");
	                return prestamosVencidos > 0; // True if there are overdue loans
	            }
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return false;
	}
	


	
    // Validate if a user has outstanding penalties or is inactive
	public boolean validarUsuario(String username) {
	    String sql = "SELECT COUNT(*) AS prestamos_activos " +
	                 "FROM prestamos " +
	                 "WHERE id_usuario = (SELECT id FROM usuarios WHERE username = ?) " +
	                 "AND estado = 'Pendiente'";

	    try (Connection con = ConexionBD.conectar();
	         PreparedStatement ps = con.prepareStatement(sql)) {
	        ps.setString(1, username);
	        try (ResultSet rs = ps.executeQuery()) {
	            if (rs.next()) {
	                return rs.getInt("prestamos_activos") == 0; // User has no active loans
	            }
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return false;
	}

    // Validate if there are enough copies available for a loan
    public boolean validarDisponibilidadMaterial(int ejemplarId) {
        String sql = "SELECT unidades_disponibles FROM materiales WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, ejemplarId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int disponibles = rs.getInt("unidades_disponibles");
                    return disponibles > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Register a new loan
    public void registrarPrestamo(String username, int ejemplarId) {
    	String sql = "INSERT INTO prestamos (id_usuario, id_material, fecha_prestamo, estado) " +
                "VALUES ((SELECT id FROM usuarios WHERE username = ?), ?, NOW(), 'Pendiente')";

        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setInt(2, ejemplarId);
            ps.executeUpdate();
            actualizarUnidades(ejemplarId, -1); // Deduct one copy
            System.out.println("Préstamo registrado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Register a material return
    public void registrarDevolucion(int prestamoId) {
    	String sql = "UPDATE prestamos SET estado = 'Devuelto', fecha_devolucion = NOW() WHERE id = ?";

        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, prestamoId);
            ps.executeUpdate();

            // Restore the copy count
            String sqlMaterial = "SELECT id_material FROM prestamos WHERE id = ?";
            try (PreparedStatement psMaterial = con.prepareStatement(sqlMaterial)) {
                psMaterial.setInt(1, prestamoId);
                try (ResultSet rs = psMaterial.executeQuery()) {
                    if (rs.next()) {
                        int ejemplarId = rs.getInt("id_material");
                        actualizarUnidades(ejemplarId, 1);
                    }
                }
            }
            System.out.println("Devolución registrada correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Calculate overdue penalties
    public double calcularMora(int prestamoId, double tasaDiaria) {
        String sql = "SELECT DATEDIFF(NOW(), fecha_prestamo) AS dias FROM prestamos WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, prestamoId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int dias = rs.getInt("dias");
                    return dias > 0 ? dias * tasaDiaria : 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    // Register overdue penalties
    public void registrarMora(int prestamoId, double mora) {
        String sql = "INSERT INTO multas (id_prestamo, monto, pagada, fecha_generacion) VALUES (?, ?, false, NOW())";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, prestamoId);
            ps.setDouble(2, mora);
            ps.executeUpdate();

            // Update user's accumulated mora
            String sqlUsuario = "UPDATE usuarios SET mora_acumulada = mora_acumulada + ? " +
                                "WHERE id = (SELECT id_usuario FROM prestamos WHERE id = ?)";
            try (PreparedStatement psUsuario = con.prepareStatement(sqlUsuario)) {
                psUsuario.setDouble(1, mora);
                psUsuario.setInt(2, prestamoId);
                psUsuario.executeUpdate();
            }
            System.out.println("Mora registrada correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Update the number of available copies for a material
    public void actualizarUnidades(int ejemplarId, int cambio) {
        String sql = "UPDATE materiales SET unidades_disponibles = unidades_disponibles + ? WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, cambio);
            ps.setInt(2, ejemplarId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public boolean validarLimitePrestamos(String username, String tipoMaterial) {
        String sqlLimite = "SELECT max_prestamos FROM configuracion_prestamos WHERE tipo_material = ?";
        String sqlConteo = "SELECT COUNT(*) AS prestamos_activos " +
                "FROM prestamos p " +
                "JOIN materiales m ON p.id_material = m.id " +
                "WHERE p.estado = 'Pendiente' AND m.tipo = ? AND p.id_usuario = " +
                "(SELECT id FROM usuarios WHERE username = ?)";


        try (Connection con = ConexionBD.conectar();
             PreparedStatement psLimite = con.prepareStatement(sqlLimite);
             PreparedStatement psConteo = con.prepareStatement(sqlConteo)) {

            // Fetch loan limit for material type
            psLimite.setString(1, tipoMaterial);
            ResultSet rsLimite = psLimite.executeQuery();
            int maxPrestamos = 0;
            if (rsLimite.next()) {
                maxPrestamos = rsLimite.getInt("max_prestamos");
            }

            // Count active loans for the user and material type
            psConteo.setString(1, tipoMaterial);
            psConteo.setString(2, username);
            ResultSet rsConteo = psConteo.executeQuery();
            int prestamosActivos = 0;
            if (rsConteo.next()) {
                prestamosActivos = rsConteo.getInt("prestamos_activos");
            }

            // Validate limit
            return prestamosActivos < maxPrestamos;

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    
    public List<Map<String, String>> obtenerTodosPrestamos() {
        String sql = "SELECT p.id, u.username AS usuario, m.titulo AS material, " +
                     "p.fecha_prestamo, p.estado " +
                     "FROM prestamos p " +
                     "JOIN usuarios u ON p.id_usuario = u.id " +
                     "JOIN materiales m ON p.id_material = m.id";

        List<Map<String, String>> prestamos = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Map<String, String> prestamo = new HashMap<>();
                prestamo.put("id", String.valueOf(rs.getInt("id")));
                prestamo.put("usuario", rs.getString("usuario"));
                prestamo.put("material", rs.getString("material"));
                prestamo.put("fecha_prestamo", rs.getString("fecha_prestamo"));
                prestamo.put("estado", rs.getString("estado"));
                prestamos.add(prestamo);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prestamos;
    }
    
    public List<Map<String, String>> obtenerPrestamosPendientes(String username) {
        String sql = "SELECT p.id, u.username AS usuario, m.titulo AS material, " +
                     "p.fecha_prestamo " +
                     "FROM prestamos p " +
                     "JOIN usuarios u ON p.id_usuario = u.id " +
                     "JOIN materiales m ON p.id_material = m.id " +
                     "WHERE p.estado = 'Pendiente'";

        if (username != null) {
            sql += " AND u.username = ?";
        }

        List<Map<String, String>> prestamos = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            if (username != null) {
                ps.setString(1, username);
            }
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Map<String, String> prestamo = new HashMap<>();
                    prestamo.put("id", String.valueOf(rs.getInt("id")));
                    prestamo.put("usuario", rs.getString("usuario"));
                    prestamo.put("material", rs.getString("material"));
                    prestamo.put("fecha_prestamo", rs.getString("fecha_prestamo"));
                    prestamos.add(prestamo);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prestamos;
    }

    public List<Map<String, String>> obtenerPrestamosPendientesConMora(String username) {
        String sql = "SELECT p.id, u.username AS usuario, m.titulo AS material, " +
                     "p.fecha_prestamo, p.mora_acumulada " + // Fetch mora_acumulada directly
                     "FROM prestamos p " +
                     "JOIN usuarios u ON p.id_usuario = u.id " +
                     "JOIN materiales m ON p.id_material = m.id " +
                     "WHERE p.estado = 'Pendiente'";

        if (username != null) {
            sql += " AND u.username = ?";
        }

        List<Map<String, String>> prestamos = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            if (username != null) {
                ps.setString(1, username);
            }
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Map<String, String> prestamo = new HashMap<>();
                    prestamo.put("id", String.valueOf(rs.getInt("id")));
                    prestamo.put("usuario", rs.getString("usuario"));
                    prestamo.put("material", rs.getString("material"));
                    prestamo.put("fecha_prestamo", rs.getString("fecha_prestamo"));
                    prestamo.put("mora_acumulada", String.format("%.2f", rs.getDouble("mora_acumulada"))); // Mora
                    prestamos.add(prestamo);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prestamos;
    }

    
    public void agregarMora(int prestamoId, double montoDiario) {
        String sql = "UPDATE prestamos SET mora_acumulada = mora_acumulada + ? WHERE id = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setDouble(1, montoDiario);
            ps.setInt(2, prestamoId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public void registrarPrestamo(int userId, int materialId) {
        String sql = "INSERT INTO prestamos (id_usuario, id_material, fecha_prestamo, estado) " +
                     "VALUES (?, ?, NOW(), 'Pendiente')";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, userId);
            ps.setInt(2, materialId);
            ps.executeUpdate();
            actualizarUnidades(materialId, -1);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



}

================
File: dao/UsuarioDAO.java
================
package com.biblioteca.dao;

import com.biblioteca.conexion.ConexionBD;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UsuarioDAO {

    public void registrarUsuario(String nombre, String username, String password, String correo, String telefono, String tipo) {
        String sql = "INSERT INTO usuarios (nombre, username, password, correo, telefono, tipo) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, nombre);
            ps.setString(2, username);
            ps.setString(3, password);
            ps.setString(4, correo);
            ps.setString(5, telefono);
            ps.setString(6, tipo);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<String[]> obtenerUsuarios() {
        String sql = "SELECT nombre, username, tipo, correo, telefono, estado FROM usuarios";
        List<String[]> usuarios = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                usuarios.add(new String[]{
                    rs.getString("nombre"),
                    rs.getString("username"),
                    rs.getString("tipo"),
                    rs.getString("correo"),
                    rs.getString("telefono"),
                    rs.getString("estado")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return usuarios;
    }

    public boolean validarCredenciales(String username, String password) {
        String sql = "SELECT COUNT(*) FROM usuarios WHERE username = ? AND password = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next() && rs.getInt(1) > 0) {
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public void actualizarContrasena(String username, String nuevaContrasena) {
        String sql = "UPDATE usuarios SET password = ? WHERE username = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, nuevaContrasena);
            ps.setString(2, username);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void eliminarUsuario(String username) {
        String sql = "DELETE FROM usuarios WHERE username = ?";
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, username);
            int filasAfectadas = ps.executeUpdate();
            if (filasAfectadas == 0) {
                System.out.println("Advertencia: No se encontró un usuario con el username proporcionado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public List<String[]> obtenerUsuariosSinAtrasos() {
        String sql = "SELECT u.id, u.nombre, u.username " +
                     "FROM usuarios u " +
                     "WHERE NOT EXISTS ( " +
                     "SELECT 1 FROM prestamos p " +
                     "WHERE p.id_usuario = u.id " +
                     "AND p.estado = 'Pendiente' " +
                     "AND DATE_ADD(p.fecha_prestamo, INTERVAL 15 DAY) < NOW()" +
                     ")";
        List<String[]> usuarios = new ArrayList<>();
        try (Connection con = ConexionBD.conectar();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                usuarios.add(new String[]{
                    String.valueOf(rs.getInt("id")),
                    rs.getString("nombre"),
                    rs.getString("username")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return usuarios;
    }

}

================
File: main/MainApp.java
================
package com.biblioteca.main;

import com.biblioteca.ui.LoginUI;

public class MainApp {

    public static void main(String[] args) {
        // Mostrar la interfaz de inicio de sesión
        LoginUI loginUI = new LoginUI();
        loginUI.mostrarLogin(); // Esto redirigirá al menú principal si el inicio de sesión es exitoso.
    }
}

================
File: service/PrestamoService.java
================
package com.biblioteca.service;

import java.util.List;
import java.util.Map;

import com.biblioteca.dao.PrestamoDAO;

public class PrestamoService {

    private PrestamoDAO prestamoDAO = new PrestamoDAO();
    

    // Check if a user can borrow based on their status and material availability
    public boolean puedePrestar(String username, int ejemplarId, String tipoMaterial) {
        if (prestamoDAO.tienePrestamosDefaulter(username)) {
            System.out.println("El usuario tiene préstamos vencidos.");
            return false;
        }

        if (!prestamoDAO.validarDisponibilidadMaterial(ejemplarId)) {
            System.out.println("El material no está disponible para préstamo.");
            return false;
        }

        if (!prestamoDAO.validarLimitePrestamos(username, tipoMaterial)) {
            System.out.println("El usuario ha alcanzado el límite de préstamos para el tipo: " + tipoMaterial);
            return false;
        }

        return true;
    }




    // Register a new loan after validations
    public void registrarPrestamo(String username, int ejemplarId, String tipoMaterial) {
        if (!puedePrestar(username, ejemplarId, tipoMaterial)) {
            System.out.println("No se puede registrar el préstamo.");
            return;
        }
        prestamoDAO.registrarPrestamo(username, ejemplarId); // This calls the fixed DAO method

        System.out.println("Préstamo registrado correctamente.");
    }


    // Register the return of a borrowed material
    public void registrarDevolucion(int prestamoId, double tasaDiaria) {
        double mora = prestamoDAO.calcularMora(prestamoId, tasaDiaria);
        prestamoDAO.registrarDevolucion(prestamoId); // This calls the fixed DAO method

        if (mora > 0) {
            prestamoDAO.registrarMora(prestamoId, mora);
            System.out.println("Mora registrada: $" + mora);
        } else {
            System.out.println("Devolución registrada sin mora.");
        }
    }

    // Calculate overdue penalties
    public double calcularMora(int prestamoId, double tasaDiaria) {
        return prestamoDAO.calcularMora(prestamoId, tasaDiaria);
    }
    
    public List<Map<String, String>> obtenerPrestamosActivos(String username) {
        return prestamoDAO.obtenerPrestamosActivos(username);
    }
    
    public List<Map<String, String>> obtenerTodosPrestamos() {
        return prestamoDAO.obtenerTodosPrestamos();
    }
    
    public List<Map<String, String>> obtenerPrestamosPendientes(String username) {
        return prestamoDAO.obtenerPrestamosPendientes(username);
    }

    public List<Map<String, String>> obtenerPrestamosPendientesConMora(String username) {
        return prestamoDAO.obtenerPrestamosPendientesConMora(username);
    }

    public void agregarMora(int prestamoId, double montoDiario) {
        prestamoDAO.agregarMora(prestamoId, montoDiario);
    }
    
    public boolean puedePrestar(int userId, int materialId) {
        if (!prestamoDAO.validarDisponibilidadMaterial(materialId)) {
            System.out.println("El material no está disponible.");
            return false;
        }
        if (!usuarioDAO.validarUsuario(userId)) {
            System.out.println("El usuario tiene préstamos vencidos.");
            return false;
        }
        return true;
    }

    public void registrarPrestamo(int userId, int materialId) {
        if (puedePrestar(userId, materialId)) {
            prestamoDAO.registrarPrestamo(userId, materialId);
            System.out.println("Préstamo registrado correctamente.");
        } else {
            System.out.println("El préstamo no puede ser registrado.");
        }
    }



}

================
File: service/UsuarioService.java
================
package com.biblioteca.service;

import com.biblioteca.dao.UsuarioDAO;

import java.util.List;

public class UsuarioService {
    private UsuarioDAO usuarioDAO = new UsuarioDAO();

    public void registrarUsuario(String nombre, String username, String password, String correo, String telefono, String tipo) {
        usuarioDAO.registrarUsuario(nombre, username, password, correo, telefono, tipo);
    }

    public List<String[]> obtenerUsuarios() {
        return usuarioDAO.obtenerUsuarios();
    }

    public boolean login(String username, String password) {
        return usuarioDAO.validarCredenciales(username, password);
    }

    public void actualizarContrasena(String username, String nuevaContrasena) {
        usuarioDAO.actualizarContrasena(username, nuevaContrasena);
    }
    
    public void eliminarUsuario(String username) {
        usuarioDAO.eliminarUsuario(username); // Llamada al DAO
    }
}

================
File: ui/AgregarMaterialUI.java
================
package com.biblioteca.ui;

import com.biblioteca.dao.EjemplarDAO;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class AgregarMaterialUI {
    private EjemplarDAO ejemplarDAO = new EjemplarDAO();
    private Map<String, JTextField> camposEspecificos = new HashMap<>();

    private static final Map<String, String[]> CAMPOS_ESPECIFICOS = Map.of(
        "Libro", new String[] {"Autor", "Editorial", "ISBN", "Número de Páginas", "Género", "Año de Publicación"},
        "Revista", new String[] {"Editorial", "Periodicidad", "Fecha de Publicación"},
        "CD", new String[] {"Artista", "Género", "Duración", "Número de Canciones"},
        "DVD", new String[] {"Director", "Género", "Duración"},
        "Tesis", new String[] {"Autor", "Título de Investigación", "Carrera", "Universidad", "Año de Presentación"}
    );

    public void mostrarVentana() {
        JFrame frame = new JFrame("Agregar Nuevo Material");
        frame.setSize(600, 750);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(null);

        JLabel lblTipo = new JLabel("Tipo de Material:");
        lblTipo.setBounds(20, 20, 150, 25);
        frame.add(lblTipo);

        JComboBox<String> comboTipo = new JComboBox<>(CAMPOS_ESPECIFICOS.keySet().toArray(new String[0]));
        comboTipo.setBounds(180, 20, 200, 25);
        frame.add(comboTipo);

        JLabel lblTitulo = new JLabel("Título:");
        lblTitulo.setBounds(20, 60, 150, 25);
        frame.add(lblTitulo);

        JTextField txtTitulo = new JTextField();
        txtTitulo.setBounds(180, 60, 200, 25);
        frame.add(txtTitulo);

        JLabel lblCantidad = new JLabel("Cantidad:");
        lblCantidad.setBounds(20, 100, 150, 25);
        frame.add(lblCantidad);

        JTextField txtCantidad = new JTextField();
        txtCantidad.setBounds(180, 100, 200, 25);
        frame.add(txtCantidad);

        JLabel lblUbicacion = new JLabel("Ubicación:");
        lblUbicacion.setBounds(20, 140, 150, 25);
        frame.add(lblUbicacion);

        JTextField txtUbicacion = new JTextField();
        txtUbicacion.setBounds(180, 140, 200, 25);
        frame.add(txtUbicacion);

        JPanel panelDetalles = new JPanel(new GridBagLayout());
        JScrollPane scrollDetalles = new JScrollPane(panelDetalles);
        scrollDetalles.setBounds(20, 200, 550, 250);
        frame.add(scrollDetalles);

        actualizarCampos(panelDetalles, camposEspecificos, (String) comboTipo.getSelectedItem());

        comboTipo.addActionListener(e -> {
            panelDetalles.removeAll();
            actualizarCampos(panelDetalles, camposEspecificos, (String) comboTipo.getSelectedItem());
            panelDetalles.revalidate();
            panelDetalles.repaint();
        });

        JButton btnGuardar = new JButton("Guardar");
        btnGuardar.setBounds(150, 500, 120, 30);
        estilizarBoton(btnGuardar, new Color(40, 167, 69), Color.WHITE);
        frame.add(btnGuardar);

        btnGuardar.addActionListener(e -> {
            try {
                String tipo = (String) comboTipo.getSelectedItem();
                String titulo = txtTitulo.getText();
                int cantidad = Integer.parseInt(txtCantidad.getText());
                String ubicacion = txtUbicacion.getText();

                if (titulo.isEmpty() || ubicacion.isEmpty()) {
                    throw new IllegalArgumentException("Todos los campos son obligatorios.");
                }

                Map<String, String> detallesEspecificos = new HashMap<>();
                for (String campo : CAMPOS_ESPECIFICOS.get(tipo)) {
                    String valor = camposEspecificos.get(campo).getText();
                    if (valor.isEmpty()) {
                        throw new IllegalArgumentException("El campo " + campo + " es obligatorio.");
                    }
                    detallesEspecificos.put(campo, valor);
                }

                // Llamar al DAO para registrar el ejemplar
                ejemplarDAO.registrarEjemplarConDetalles(tipo, titulo, cantidad, ubicacion, detallesEspecificos);

                JOptionPane.showMessageDialog(frame, "Material registrado correctamente.");
                frame.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "Por favor, ingrese valores válidos.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(frame, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Error al registrar el material: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Botón Regresar
        JButton btnRegresar = new JButton("Regresar");
        btnRegresar.setBounds(300, 500, 120, 30);
        estilizarBoton(btnRegresar, new Color(220, 53, 69), Color.WHITE);
        frame.add(btnRegresar);

        btnRegresar.addActionListener(e -> {
            frame.dispose();
            new GestionMaterialesUI().mostrarVentana();
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void actualizarCampos(JPanel panel, Map<String, JTextField> camposEspecificos, String tipo) {
        panel.removeAll();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        for (String campo : CAMPOS_ESPECIFICOS.get(tipo)) {
            JLabel label = new JLabel(campo + ":");
            JTextField textField = new JTextField(15);
            gbc.gridx = 0;
            gbc.gridy++;
            panel.add(label, gbc);
            gbc.gridx = 1;
            panel.add(textField, gbc);
            camposEspecificos.put(campo, textField);
        }
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.BOLD, 14));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/AgregarUsuarioUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.UsuarioService;

import javax.swing.*;
import java.awt.*;

public class AgregarUsuarioUI {
    private UsuarioService usuarioService = new UsuarioService();

    public void mostrarVentana() {
        JFrame frame = new JFrame("Agregar Usuario Nuevo");
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setResizable(false);

        JLabel titulo = new JLabel("Agregar Usuario Nuevo", SwingConstants.CENTER);
        titulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        titulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        frame.add(titulo, BorderLayout.NORTH);

        JPanel panelFormulario = new JPanel(new GridLayout(6, 2, 10, 10));
        panelFormulario.setBorder(BorderFactory.createEmptyBorder(20, 50, 20, 50));

        JTextField txtNombre = new JTextField();
        JTextField txtUsername = new JTextField();
        JTextField txtCorreo = new JTextField();
        JPasswordField txtPassword = new JPasswordField();
        JTextField txtTelefono = new JTextField();
        JComboBox<String> cmbTipo = new JComboBox<>(new String[]{"Administrador", "Profesor", "Alumno"});

        panelFormulario.add(new JLabel("Nombre:", SwingConstants.RIGHT));
        panelFormulario.add(txtNombre);
        panelFormulario.add(new JLabel("Usuario:", SwingConstants.RIGHT));
        panelFormulario.add(txtUsername);
        panelFormulario.add(new JLabel("Correo:", SwingConstants.RIGHT));
        panelFormulario.add(txtCorreo);
        panelFormulario.add(new JLabel("Contraseña:", SwingConstants.RIGHT));
        panelFormulario.add(txtPassword);
        panelFormulario.add(new JLabel("Teléfono:", SwingConstants.RIGHT));
        panelFormulario.add(txtTelefono);
        panelFormulario.add(new JLabel("Tipo:", SwingConstants.RIGHT));
        panelFormulario.add(cmbTipo);

        frame.add(panelFormulario, BorderLayout.CENTER);

        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        JButton btnGuardar = new JButton("Guardar");
        JButton btnCancelar = new JButton("Cancelar");

        estilizarBoton(btnGuardar, new Color(40, 167, 69), Color.WHITE);
        estilizarBoton(btnCancelar, new Color(220, 53, 69), Color.WHITE);

        panelBotones.add(btnGuardar);
        panelBotones.add(btnCancelar);
        frame.add(panelBotones, BorderLayout.SOUTH);

        btnGuardar.addActionListener(e -> {
            String nombre = txtNombre.getText();
            String username = txtUsername.getText();
            String correo = txtCorreo.getText();
            String password = new String(txtPassword.getPassword());
            String telefono = txtTelefono.getText();
            String tipo = (String) cmbTipo.getSelectedItem();

            usuarioService.registrarUsuario(nombre, username, password, correo, telefono, tipo);
            JOptionPane.showMessageDialog(frame, "Usuario agregado correctamente.");
            frame.dispose();
            new GestionUsuariosUI().mostrarVentana();
        });

        btnCancelar.addActionListener(e -> {
            frame.dispose();
            new GestionUsuariosUI().mostrarVentana();
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.PLAIN, 16));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/BuscarMaterialesUI.java
================
package com.biblioteca.ui;

import com.biblioteca.dao.EjemplarDAO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

public class BuscarMaterialesUI {
    private EjemplarDAO ejemplarDAO = new EjemplarDAO();

    public void mostrarVentana() {
        JFrame frame = new JFrame("Buscar Materiales");
        frame.setSize(600, 450);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        JLabel titulo = new JLabel("Buscar Materiales", SwingConstants.CENTER);
        titulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        titulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        frame.add(titulo, BorderLayout.NORTH);

        JPanel panelBusqueda = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 10));
        JLabel lblBuscar = new JLabel("Título o Tipo:");
        JTextField txtBuscar = new JTextField(20);
        JButton btnBuscar = new JButton("Buscar");

        estilizarBoton(btnBuscar, new Color(40, 167, 69), Color.WHITE);

        panelBusqueda.add(lblBuscar);
        panelBusqueda.add(txtBuscar);
        panelBusqueda.add(btnBuscar);
        frame.add(panelBusqueda, BorderLayout.NORTH);

        String[] columnas = {"ID", "Tipo", "Título", "Cantidad", "Ubicación"};
        DefaultTableModel modeloTabla = new DefaultTableModel(columnas, 0);
        JTable tablaResultados = new JTable(modeloTabla);
        JScrollPane scrollPane = new JScrollPane(tablaResultados);
        frame.add(scrollPane, BorderLayout.CENTER);

        JPanel panelInferior = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton btnRegresar = new JButton("Regresar");
        estilizarBoton(btnRegresar, new Color(220, 53, 69), Color.WHITE);

        panelInferior.add(btnRegresar);
        frame.add(panelInferior, BorderLayout.SOUTH);

        // Acción del botón Buscar
        btnBuscar.addActionListener(e -> {
            String criterio = txtBuscar.getText();
            modeloTabla.setRowCount(0); // Limpiar resultados previos

            List<String[]> resultados = ejemplarDAO.buscarMateriales(criterio);
            for (String[] fila : resultados) {
                modeloTabla.addRow(fila);
            }
        });

        // Acción del botón Regresar
        btnRegresar.addActionListener(e -> {
            frame.dispose();
            new GestionMaterialesUI().mostrarVentana();
        });
        
        

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
    
    
    	
 

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.PLAIN, 16));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/GestionMaterialesUI.java
================
package com.biblioteca.ui;

import javax.swing.*;
import java.awt.*;

public class GestionMaterialesUI {

    public void mostrarVentana() {
        JFrame frame = new JFrame("Gestión de Materiales");
        frame.setSize(400, 300); // Increased height to fit the "Atrás" button
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setResizable(false);

        JLabel titulo = new JLabel("Gestión de Materiales", SwingConstants.CENTER);
        titulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        titulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        frame.add(titulo, BorderLayout.NORTH);

        // Panel for buttons
        JPanel panelBotones = new JPanel(new GridLayout(3, 1, 30, 30)); // Updated to fit 3 buttons
        JButton btnAgregarMaterial = new JButton("Agregar Material Nuevo");
        JButton btnBuscarMaterial = new JButton("Buscar Materiales");
        JButton btnAtras = new JButton("Atrás"); // Added "Atrás" button

        estilizarBoton(btnAgregarMaterial, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnBuscarMaterial, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnAtras, new Color(192, 57, 43), Color.WHITE); // Red background for "Atrás"

        panelBotones.add(btnAgregarMaterial);
        panelBotones.add(btnBuscarMaterial);
        panelBotones.add(btnAtras); // Add "Atrás" button to panel
        panelBotones.setBorder(BorderFactory.createEmptyBorder(20, 50, 20, 50)); // Adjusted padding
        frame.add(panelBotones, BorderLayout.CENTER);

        // Add actions to buttons
        btnAgregarMaterial.addActionListener(e -> {
            frame.dispose();
            new AgregarMaterialUI().mostrarVentana();
        });

        btnBuscarMaterial.addActionListener(e -> {
            frame.dispose();
            new BuscarMaterialesUI().mostrarVentana();
        });

        btnAtras.addActionListener(e -> {
            frame.dispose();
            MainUI.mostrarVentana(); // Reuse the existing Main Menu window
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.PLAIN, 16));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/GestionUsuariosUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.UsuarioService;

import javax.swing.*;
import java.awt.*;

public class GestionUsuariosUI {
    private UsuarioService usuarioService = new UsuarioService();

    public void mostrarVentana() {
        JFrame frame = new JFrame("Gestión de Usuarios");
        frame.setSize(400, 300); // Increased height to fit the "Volver" button
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setResizable(false);

        JLabel titulo = new JLabel("Gestión de Usuarios", SwingConstants.CENTER);
        titulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        titulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        frame.add(titulo, BorderLayout.NORTH);

        JPanel panelBotones = new JPanel(new GridLayout(3, 1, 20, 20)); // Updated to fit 3 buttons
        JButton btnAgregarUsuario = new JButton("Agregar Usuario Nuevo");
        JButton btnListarUsuarios = new JButton("Listar Usuarios");
        JButton btnVolver = new JButton("Volver"); // Added "Volver" button

        estilizarBoton(btnAgregarUsuario, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnListarUsuarios, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnVolver, new Color(192, 57, 43), Color.WHITE); // Red background for "Volver"

        panelBotones.add(btnAgregarUsuario);
        panelBotones.add(btnListarUsuarios);
        panelBotones.add(btnVolver); // Add "Volver" button to panel
        panelBotones.setBorder(BorderFactory.createEmptyBorder(0, 50, 20, 50));
        frame.add(panelBotones, BorderLayout.CENTER);

        // Action listeners for the buttons
        btnAgregarUsuario.addActionListener(e -> {
            frame.dispose();
            new AgregarUsuarioUI().mostrarVentana();
        });

        btnListarUsuarios.addActionListener(e -> {
            frame.dispose();
            new ListarUsuariosUI().mostrarVentana();
        });

        btnVolver.addActionListener(e -> {
            frame.dispose();
            MainUI.mostrarVentana(); // Correctly call the static method to show the main menu
        });


        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.PLAIN, 16));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/HacerPrestamoUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.PrestamoService;
import com.biblioteca.dao.UsuarioDAO;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class HacerPrestamoUI {
    private PrestamoService prestamoService = new PrestamoService();
    private UsuarioDAO usuarioDAO = new UsuarioDAO();
    private int materialId;

    public HacerPrestamoUI(int materialId) {
        this.materialId = materialId; // Material ID passed from the material selection UI
    }

    public void mostrarVentana() {
        JFrame frame = new JFrame("Hacer Préstamo de Material");
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        frame.add(panel);

        colocarComponentes(panel, frame);

        frame.setVisible(true);
    }

    private void colocarComponentes(JPanel panel, JFrame frame) {
        JLabel lblUsuarios = new JLabel("Seleccione Usuario:");
        lblUsuarios.setBounds(20, 20, 150, 25);
        panel.add(lblUsuarios);

        JComboBox<String> cmbUsuarios = new JComboBox<>();
        cmbUsuarios.setBounds(180, 20, 250, 25);
        panel.add(cmbUsuarios);

        // Populate the combo box with users without overdue loans
        List<String[]> usuarios = usuarioDAO.obtenerUsuariosSinAtrasos();
        for (String[] usuario : usuarios) {
            cmbUsuarios.addItem(usuario[1] + " - " + usuario[2]); // Display "Name - Username"
        }

        JButton btnPrestar = new JButton("Registrar Préstamo");
        btnPrestar.setBounds(150, 100, 200, 30);
        panel.add(btnPrestar);

        JButton btnCancelar = new JButton("Cancelar");
        btnCancelar.setBounds(150, 150, 200, 30);
        panel.add(btnCancelar);

        // Action to register the loan
        btnPrestar.addActionListener(e -> {
            int selectedIndex = cmbUsuarios.getSelectedIndex();
            if (selectedIndex == -1) {
                JOptionPane.showMessageDialog(panel, "Debe seleccionar un usuario.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                int userId = Integer.parseInt(usuarios.get(selectedIndex)[0]); // Get the user ID
                prestamoService.registrarPrestamo(userId, materialId);
                JOptionPane.showMessageDialog(panel, "Préstamo registrado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                frame.dispose(); // Close the window
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(panel, "Error al registrar el préstamo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Action to cancel the loan process
        btnCancelar.addActionListener(e -> frame.dispose());
    }
}

================
File: ui/ListarUsuariosUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.UsuarioService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

public class ListarUsuariosUI {
    private UsuarioService usuarioService = new UsuarioService();

    public void mostrarVentana() {
        JFrame frame = new JFrame("Usuarios Registrados");
        frame.setSize(850, 500);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setResizable(false); // No redimensionable
        frame.getContentPane().setBackground(Color.WHITE);

        // Título
        JLabel titulo = new JLabel("Usuarios Registrados", SwingConstants.CENTER);
        titulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        titulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        frame.add(titulo, BorderLayout.NORTH);

        // Tabla
        String[] columnas = {"Nombre", "Usuario", "Tipo", "Correo", "Teléfono", "Estado"};
        DefaultTableModel modeloTabla = new DefaultTableModel(columnas, 0);
        JTable tablaUsuarios = new JTable(modeloTabla);
        tablaUsuarios.setFont(new Font("SansSerif", Font.PLAIN, 14));
        tablaUsuarios.setRowHeight(25);
        tablaUsuarios.setGridColor(Color.LIGHT_GRAY);
        JScrollPane scrollPane = new JScrollPane(tablaUsuarios);
        scrollPane.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        frame.add(scrollPane, BorderLayout.CENTER);

        // Botones
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        panelBotones.setBackground(Color.WHITE);
        JButton btnCambiarContraseña = new JButton("Cambiar Contraseña");
        JButton btnEliminarUsuario = new JButton("Eliminar Usuario");
        JButton btnRegresar = new JButton("Regresar");

        estilizarBoton(btnCambiarContraseña, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnEliminarUsuario, new Color(220, 53, 69), Color.WHITE);
        estilizarBoton(btnRegresar, new Color(108, 117, 125), Color.WHITE);

        panelBotones.add(btnCambiarContraseña);
        panelBotones.add(btnEliminarUsuario);
        panelBotones.add(btnRegresar);
        frame.add(panelBotones, BorderLayout.SOUTH);

        // Llenar la tabla con datos
        actualizarTablaUsuarios(modeloTabla);

        // Eventos
        btnCambiarContraseña.addActionListener(e -> {
            int filaSeleccionada = tablaUsuarios.getSelectedRow();
            if (filaSeleccionada != -1) {
                String username = (String) modeloTabla.getValueAt(filaSeleccionada, 1);
                mostrarFormularioCambiarContraseña(frame, username);
            } else {
                JOptionPane.showMessageDialog(frame, "Seleccione un usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        btnEliminarUsuario.addActionListener(e -> {
            int filaSeleccionada = tablaUsuarios.getSelectedRow();
            if (filaSeleccionada != -1) {
                String username = (String) modeloTabla.getValueAt(filaSeleccionada, 1);
                int confirmacion = JOptionPane.showConfirmDialog(
                        frame,
                        "¿Está seguro de que desea eliminar al usuario " + username + "?",
                        "Confirmar Eliminación",
                        JOptionPane.YES_NO_OPTION
                );

                if (confirmacion == JOptionPane.YES_OPTION) {
                    usuarioService.eliminarUsuario(username);
                    actualizarTablaUsuarios(modeloTabla);
                    JOptionPane.showMessageDialog(frame, "Usuario eliminado correctamente.");
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Seleccione un usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        btnRegresar.addActionListener(e -> {
            frame.dispose();
            new GestionUsuariosUI().mostrarVentana();
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void actualizarTablaUsuarios(DefaultTableModel modeloTabla) {
        modeloTabla.setRowCount(0);
        List<String[]> usuarios = usuarioService.obtenerUsuarios();
        for (String[] usuario : usuarios) {
            modeloTabla.addRow(usuario);
        }
    }

    private void mostrarFormularioCambiarContraseña(JFrame parentFrame, String username) {
        JDialog dialog = new JDialog(parentFrame, "Cambiar Contraseña", true);
        dialog.setSize(400, 200);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setResizable(false); // No redimensionable
        dialog.setLayout(new BorderLayout());
        dialog.getContentPane().setBackground(Color.WHITE);

        JLabel lblTitulo = new JLabel("Nueva Contraseña", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("SansSerif", Font.BOLD, 18));
        lblTitulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 10, 0));
        dialog.add(lblTitulo, BorderLayout.NORTH);

        JPanel panelCentro = new JPanel(new GridLayout(1, 2, 10, 10));
        panelCentro.setBorder(BorderFactory.createEmptyBorder(20, 50, 20, 50));
        panelCentro.setBackground(Color.WHITE);
        JPasswordField txtNuevaContrasena = new JPasswordField();
        txtNuevaContrasena.setFont(new Font("SansSerif", Font.PLAIN, 16));

        panelCentro.add(new JLabel("Contraseña:"));
        panelCentro.add(txtNuevaContrasena);
        dialog.add(panelCentro, BorderLayout.CENTER);

        JButton btnGuardar = new JButton("Guardar");
        estilizarBoton(btnGuardar, new Color(40, 167, 69), Color.WHITE);
        dialog.add(btnGuardar, BorderLayout.SOUTH);

        btnGuardar.addActionListener(e -> {
            String nuevaContrasena = new String(txtNuevaContrasena.getPassword());
            usuarioService.actualizarContrasena(username, nuevaContrasena);
            JOptionPane.showMessageDialog(dialog, "Contraseña actualizada correctamente.");
            dialog.dispose();
        });

        dialog.setLocationRelativeTo(parentFrame);
        dialog.setVisible(true);
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.BOLD, 14));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/LoginUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.UsuarioService;

import javax.swing.*;
import java.awt.*;

public class LoginUI {
    private UsuarioService usuarioService = new UsuarioService();

    public void mostrarLogin() {
        // Configuración de la ventana principal
        JFrame frame = new JFrame("Sistema Biblioteca - Login");
        frame.setSize(450, 350); // Tamaño aumentado
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setResizable(false); // No permitir redimensionar

        // Título
        JLabel lblTitulo = new JLabel("Bienvenido", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("SansSerif", Font.BOLD, 26)); // Fuente más grande
        lblTitulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        frame.add(lblTitulo, BorderLayout.NORTH);

        // Panel Central: Formulario de Login
        JPanel panelCentral = new JPanel(new GridLayout(4, 1, 15, 15)); // Espaciado aumentado
        panelCentral.setBorder(BorderFactory.createEmptyBorder(20, 50, 20, 50));

        JLabel lblUsuario = new JLabel("Usuario:");
        lblUsuario.setFont(new Font("SansSerif", Font.PLAIN, 18));

        JTextField txtUsuario = new JTextField();
        txtUsuario.setFont(new Font("SansSerif", Font.PLAIN, 18)); // Fuente más grande
        txtUsuario.setPreferredSize(new Dimension(250, 40)); // Tamaño ajustado

        JLabel lblPassword = new JLabel("Contraseña:");
        lblPassword.setFont(new Font("SansSerif", Font.PLAIN, 18));

        JPasswordField txtPassword = new JPasswordField();
        txtPassword.setFont(new Font("SansSerif", Font.PLAIN, 18)); // Fuente más grande
        txtPassword.setPreferredSize(new Dimension(250, 40)); // Tamaño ajustado

        panelCentral.add(lblUsuario);
        panelCentral.add(txtUsuario);
        panelCentral.add(lblPassword);
        panelCentral.add(txtPassword);

        frame.add(panelCentral, BorderLayout.CENTER);

        // Panel Inferior: Botones
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        JButton btnLogin = new JButton("Login");
        JButton btnSalir = new JButton("Salir");

        estilizarBoton(btnLogin, new Color(40, 167, 69), Color.WHITE);
        estilizarBoton(btnSalir, new Color(220, 53, 69), Color.WHITE);

        panelBotones.add(btnLogin);
        panelBotones.add(btnSalir);
        frame.add(panelBotones, BorderLayout.SOUTH);

        // Eventos de los Botones
        btnLogin.addActionListener(e -> {
            String username = txtUsuario.getText();
            String password = new String(txtPassword.getPassword());

            if (usuarioService.login(username, password)) {
                JOptionPane.showMessageDialog(frame, "Inicio de sesión exitoso.");
                frame.dispose();
                MainUI.mostrarVentana(); // Correct method call to show the main menu
            } else {
                JOptionPane.showMessageDialog(frame, "Usuario o contraseña incorrectos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        btnSalir.addActionListener(e -> System.exit(0));

        // Centrar la ventana y hacerla visible
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.BOLD, 16)); // Fuente más grande
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/MainUI.java
================
package com.biblioteca.ui;

import javax.swing.*;
import java.awt.*;

public class MainUI {

    private static JFrame frame; // Static reference to ensure only one instance

    public static void mostrarVentana() {
        if (frame != null) { // If the frame already exists, bring it to the front
            frame.setVisible(true);
            frame.toFront();
            return;
        }

        frame = new JFrame("Sistema Biblioteca - Menú Principal");
        frame.setSize(400, 350); // Increased height to fit the "Cerrar sesión" button
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);

        // Main panel with BoxLayout
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        frame.add(mainPanel);

        // Title
        JLabel lblTitulo = new JLabel("Menú Principal", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        lblTitulo.setAlignmentX(Component.CENTER_ALIGNMENT);
        lblTitulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        mainPanel.add(lblTitulo);

        // Buttons
        JButton btnGestionUsuarios = new JButton("Gestión de Usuarios");
        JButton btnGestionMateriales = new JButton("Gestión de Materiales");
        JButton btnPrestamos = new JButton("Gestión de Préstamos");
        JButton btnCerrarSesion = new JButton("Cerrar sesión"); // Added "Cerrar sesión" button

        estilizarBoton(btnGestionUsuarios, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnGestionMateriales, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnPrestamos, new Color(59, 89, 182), Color.WHITE);
        estilizarBoton(btnCerrarSesion, new Color(192, 57, 43), Color.WHITE); // Red background for "Cerrar sesión"

        btnGestionUsuarios.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnGestionMateriales.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnPrestamos.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnCerrarSesion.setAlignmentX(Component.CENTER_ALIGNMENT);

        mainPanel.add(btnGestionUsuarios);
        mainPanel.add(Box.createVerticalStrut(20)); // Add spacing between buttons
        mainPanel.add(btnGestionMateriales);
        mainPanel.add(Box.createVerticalStrut(20));
        mainPanel.add(btnPrestamos);
        mainPanel.add(Box.createVerticalStrut(30)); // Add extra spacing before "Cerrar sesión"
        mainPanel.add(btnCerrarSesion);

        // Button actions
        btnGestionUsuarios.addActionListener(e -> {
            frame.setVisible(false); // Hide the main menu
            new GestionUsuariosUI().mostrarVentana();
        });
        btnGestionMateriales.addActionListener(e -> {
            frame.setVisible(false); // Hide the main menu
            new GestionMaterialesUI().mostrarVentana();
        });
        btnPrestamos.addActionListener(e -> {
            frame.setVisible(false); // Hide the main menu
            new PrestamosUI().mostrarVentana();
        });
        btnCerrarSesion.addActionListener(e -> {
            frame.dispose(); // Close the main menu
            frame = null; // Clear the reference for new login
            new LoginUI().mostrarLogin(); // Return to the login screen
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static void estilizarBoton(JButton boton, Color bgColor, Color fgColor) {
        boton.setBackground(bgColor);
        boton.setForeground(fgColor);
        boton.setFocusPainted(false);
        boton.setFont(new Font("SansSerif", Font.PLAIN, 16));
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));
    }
}

================
File: ui/OpcionesUsuarioUI.java
================
package com.biblioteca.ui;

import javax.swing.*;

public class OpcionesUsuarioUI {

    private String username;

    public OpcionesUsuarioUI(String username) {
        this.username = username;
    }

    public void mostrarVentana() {
        JFrame frame = new JFrame("Opciones de Usuario");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        frame.add(panel);

        JLabel lblUsuario = new JLabel("Usuario: " + username);
        lblUsuario.setBounds(20, 20, 200, 25);
        panel.add(lblUsuario);

        JButton btnCambiarContrasena = new JButton("Cambiar Contraseña");
        btnCambiarContrasena.setBounds(20, 60, 150, 25);
        panel.add(btnCambiarContrasena);
       
        frame.setVisible(true);
    }
}

================
File: ui/PrestamosUI.java
================
package com.biblioteca.ui;

import javax.swing.*;
import java.awt.*;

public class PrestamosUI {

    public void mostrarVentana() {
        JFrame frame = new JFrame("Gestión de Préstamos");
        frame.setSize(400, 250);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setResizable(false);

        // Main panel with BoxLayout
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        frame.add(mainPanel);

        // Title
        JLabel lblTitulo = new JLabel("Gestión de Préstamos", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("SansSerif", Font.BOLD, 22));
        lblTitulo.setAlignmentX(Component.CENTER_ALIGNMENT);
        lblTitulo.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        mainPanel.add(lblTitulo);

        // Buttons
        JButton btnHacerPrestamo = new JButton("Hacer préstamo de material");
        JButton btnVerPrestamos = new JButton("Ver préstamos actuales");

        estilizarBoton(btnHacerPrestamo);
        estilizarBoton(btnVerPrestamos);

        btnHacerPrestamo.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnVerPrestamos.setAlignmentX(Component.CENTER_ALIGNMENT);

        mainPanel.add(btnHacerPrestamo);
        mainPanel.add(Box.createVerticalStrut(20)); // Add spacing between buttons
        mainPanel.add(btnVerPrestamos);

        // Button actions
        btnHacerPrestamo.addActionListener(e -> new HacerPrestamoUI().mostrarVentana());
        btnVerPrestamos.addActionListener(e -> new VerPrestamosUI().mostrarVentana());

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void estilizarBoton(JButton boton) {
        boton.setFont(new Font("SansSerif", Font.PLAIN, 16));
        boton.setFocusPainted(false);
    }
}

================
File: ui/RegresarMaterialUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.PrestamoService;

import javax.swing.*;

public class RegresarMaterialUI {
    private PrestamoService prestamoService = new PrestamoService();

    public void mostrarVentana() {
        JFrame frame = new JFrame("Regresar Material");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        frame.add(panel);

        colocarComponentes(panel);

        frame.setVisible(true);
    }

    private void colocarComponentes(JPanel panel) {
        JLabel lblPrestamoId = new JLabel("ID del préstamo:");
        lblPrestamoId.setBounds(20, 20, 150, 25);
        panel.add(lblPrestamoId);

        JTextField txtPrestamoId = new JTextField(20);
        txtPrestamoId.setBounds(150, 20, 200, 25);
        panel.add(txtPrestamoId);

        JButton btnRegresar = new JButton("Regresar Material");
        btnRegresar.setBounds(120, 70, 150, 30);
        panel.add(btnRegresar);

        btnRegresar.addActionListener(e -> {
            try {
                int prestamoId = Integer.parseInt(txtPrestamoId.getText());
                prestamoService.registrarDevolucion(prestamoId, 1.0); // Example: daily rate = 1.0
                JOptionPane.showMessageDialog(panel, "Material regresado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(panel, "El ID del préstamo debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(panel, "Error al regresar material: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}

================
File: ui/VerPrestamosUI.java
================
package com.biblioteca.ui;

import com.biblioteca.service.PrestamoService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Map;

public class VerPrestamosUI {
    private PrestamoService prestamoService = new PrestamoService();
    private JTable table;

    public void mostrarVentana() {
        JFrame frame = new JFrame("Préstamos Pendientes");
        frame.setSize(700, 500); // Increased size to fit buttons
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        frame.add(panel);

        colocarComponentes(panel);

        frame.setVisible(true);
    }

    private void colocarComponentes(JPanel panel) {
        JLabel lblTitulo = new JLabel("Préstamos Pendientes");
        lblTitulo.setBounds(20, 10, 200, 25);
        panel.add(lblTitulo);

        JLabel lblUsuario = new JLabel("Usuario:");
        lblUsuario.setBounds(20, 40, 100, 25);
        panel.add(lblUsuario);

        JTextField txtUsuario = new JTextField(20);
        txtUsuario.setBounds(80, 40, 200, 25);
        panel.add(txtUsuario);

        JButton btnBuscar = new JButton("Buscar");
        btnBuscar.setBounds(300, 40, 100, 25);
        panel.add(btnBuscar);

        table = new JTable();
        table.setBounds(20, 80, 640, 300);

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(20, 80, 640, 300);
        panel.add(scrollPane);

        JButton btnRegresarMaterial = new JButton("Regresar material");
        btnRegresarMaterial.setBounds(20, 400, 150, 30);
        panel.add(btnRegresarMaterial);

        JButton btnAgregarMora = new JButton("Agregar mora");
        btnAgregarMora.setBounds(200, 400, 150, 30);
        panel.add(btnAgregarMora);

        // Load all outstanding loans at startup
        cargarPrestamos(null);

        // Search loans by user when the search button is clicked
        btnBuscar.addActionListener(e -> {
            String username = txtUsuario.getText().trim();
            cargarPrestamos(username.isEmpty() ? null : username);
        });

        // Return the selected item
        btnRegresarMaterial.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                int prestamoId = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());
                try {
                    prestamoService.registrarDevolucion(prestamoId, 1.0); // Example: $1.0 daily rate
                    JOptionPane.showMessageDialog(panel, "Material regresado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    cargarPrestamos(null); // Refresh table with latest data
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(panel, "Error al regresar material: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(panel, "Seleccione un préstamo de la lista.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        });


        // Add a day of arrears for the selected item
        btnAgregarMora.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                int prestamoId = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());
                try {
                    prestamoService.agregarMora(prestamoId, 1.0); // Add 1 day of mora equivalent to $1.0
                    JOptionPane.showMessageDialog(panel, "Mora agregada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    cargarPrestamos(null); // Refresh table with latest data
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(panel, "Error al agregar mora: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(panel, "Seleccione un préstamo de la lista.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        });

    }

    private void cargarPrestamos(String username) {
        List<Map<String, String>> prestamos = prestamoService.obtenerPrestamosPendientesConMora(username);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Usuario");
        model.addColumn("Material");
        model.addColumn("Fecha Préstamo");
        model.addColumn("Mora Acumulada");

        for (Map<String, String> prestamo : prestamos) {
            model.addRow(new Object[]{
                    prestamo.get("id"),
                    prestamo.get("usuario"),
                    prestamo.get("material"),
                    prestamo.get("fecha_prestamo"),
                    prestamo.get("mora_acumulada") // Ensure this field updates
            });
        }

        table.setModel(model);
    }

}
